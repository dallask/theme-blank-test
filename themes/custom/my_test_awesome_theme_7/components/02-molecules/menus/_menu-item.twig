{% if not item_modifiers %}
  {% set item_modifiers = [] %}
{% endif %}
{# Pass original item modifiers down to children #}
{% set original_item_modifiers = item_modifiers %}
{% if item.in_active_trail == TRUE %}
  {% set item_modifiers = item_modifiers|merge(['active']) %}
{% endif %}
{% if menu_level > 0 %}
  {% set item_modifiers = item_modifiers|merge(['sub', 'sub-' ~ menu_level]) %}
{% endif %}
{% set list__item__extra = list__item__extra|default(['nav-item'])|merge(item.list__item__extra|default([])) %}
{% if item.below %}
  {% set item_modifiers = item_modifiers|merge(['with-sub', 'dropdown']) %}
  {% set list__item__extra = list__item__extra|merge(['dropdown'])|merge(item.list__item__extra|default([])) %}
{% endif %}
{% set link_extra = link_extra|default([''])|merge(item.link_extra|default([])) %}
{% set link_attributes = item.link_attributes|default({}) %}
{# below could maybe be done without a loop? #}
{% for modifier in item.modifiers %}
  {% set item_modifiers = item_modifiers|merge([modifier]) %}
{% endfor %}

{% set list_item_label = item_label %}
{% set list__item__base_class = item_base_class|default(menu_class ~ '__item') %}
{% set list__item__modifiers = item_modifiers %}
{% set list__item__blockname = item_blockname %}

{% import "@molecules/menus/_menu.twig" as menus %}

{% extends "@atoms/lists/_list-item.twig" %}
  {% block list__item__content %}
    {% include "@base/06-common/_twig_debug.twig" with { component_debug_path: _self} %}

    {% set link_title %}
      {{ item.title|raw }}
    {% endset %}

    {# if drupal #}
    {% if directory %}
      {% set link_classes = [
        item_base_class
        |default((menu_blockname ? menu_blockname ~ '__' : '') ~ menu_class ~ '-link')
      ]
        |merge(link_extra)
        |merge(item.below ? ['dropdown-toggle'] : [])
        |merge(menu_level > 0 ? ['dropdown-item'] : [])
        |merge(menu_level == 0 ? ['nav-link'] : []) %}

      {% set link_attributes = link_attributes
        |default({})
        |merge(item.below ? {
        'data-bs-toggle': 'dropdown',
      } : {}) %}

      {% include "@atoms/links/link/link.twig" with {
        link_content: link_title,
        link_url: item.url,
        link_base_class: item_base_class|default((menu_blockname ? menu_blockname ~ '__' : '') ~ menu_class ~ '-link'),
        link_modifiers: link_modifiers,
        link_extra: link_extra|merge(link_attributes['classes'] ? [link_attributes['classes']] : [])|merge(item.below ? ['dropdown-toggle'] : [])|merge(menu_level > 0 ? ['dropdown-item'] : [])|merge(menu_level == 0 and 'nav-link' not in link_extra ? ['nav-link'] : [])|merge(item.url.getOption('attributes').class)|merge(path('<current>') == item.url|render ? ['is-active'] : []),
        link_attributes: item.url.getOption('attributes')|merge(link_attributes),
      } %}
    {% else %}
      {% include "@atoms/links/link/link.twig" with {
        link_content: link_title,
        link_url: item.url,
        link_base_class: item_base_class|default((menu_blockname ? menu_blockname ~ '__' : '') ~ menu_class ~ '-link'),
        link_modifiers: link_modifiers,
        link_extra: link_extra|merge(link_attributes['classes'] ? [link_attributes['classes']] : [])|merge(item.below ? ['dropdown-toggle'] : [])|merge(menu_level > 0 ? ['dropdown-item'] : [])|merge(menu_level == 0 and 'nav-link' not in link_extra ? ['nav-link'] : []),
        link_attributes: link_attributes|default({})|merge(item.below ? {
          'data-bs-toggle': 'dropdown',
        } : {})
      } %}
    {% endif %}
    {% if item.below %}
      {{ menus.menu_links(item.below, attributes, menu_level + 1, menu_class, menu_modifiers, menu_blockname, menu_extra, item_base_class, original_item_modifiers, item_blockname, list__addition_classes, list__attributes, list__item__extra, link_extra, directory, twig_debug_on, data_analytics) }}
    {% endif %}
  {% endblock %}
