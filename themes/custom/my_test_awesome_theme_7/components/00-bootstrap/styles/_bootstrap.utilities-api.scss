@use "sass:map";

// Ignore certain utilities generation by breakpoints.
$utility-ignore: (
  "xs": (),
  "sm": (
    "margin": false,
    "margin-x": false,
    "margin-y": false,
    "margin-top": false,
    "margin-bottom": false,
    "margin-start": false,
    "margin-end": false,
    "padding": false,
    "padding-x": false,
    "padding-y": false,
    "padding-top": false,
    "padding-bottom": false,
    "padding-start": false,
    "padding-end": false,
    "gap": false,
    "row-gap": false,
    "column-gap": false,
    "negative-margin": false,
    "negative-margin-x": false,
    "negative-margin-y": false,
    "negative-margin-top": false,
    "negative-margin-bottom": false,
    "negative-margin-start": false,
    "negative-margin-end": false,
  ),
  "md": (),
  "lg": (
    "margin": false,
    "margin-x": false,
    "margin-y": false,
    "margin-top": false,
    "margin-bottom": false,
    "margin-start": false,
    "margin-end": false,
    "padding": false,
    "padding-x": false,
    "padding-y": false,
    "padding-top": false,
    "padding-bottom": false,
    "padding-start": false,
    "padding-end": false,
    "gap": false,
    "row-gap": false,
    "column-gap": false,
    "negative-margin": false,
    "negative-margin-x": false,
    "negative-margin-y": false,
    "negative-margin-top": false,
    "negative-margin-bottom": false,
    "negative-margin-start": false,
    "negative-margin-end": false,
  ),
  "xl": (
    "margin": false,
    "margin-x": false,
    "margin-y": false,
    "margin-top": false,
    "margin-bottom": false,
    "margin-start": false,
    "margin-end": false,
    "padding": false,
    "padding-x": false,
    "padding-y": false,
    "padding-top": false,
    "padding-bottom": false,
    "padding-start": false,
    "padding-end": false,
    "gap": false,
    "row-gap": false,
    "column-gap": false,
    "negative-margin": false,
    "negative-margin-x": false,
    "negative-margin-y": false,
    "negative-margin-top": false,
    "negative-margin-bottom": false,
    "negative-margin-start": false,
    "negative-margin-end": false,
  ),
  "xxl": (
    "margin": false,
    "margin-x": false,
    "margin-y": false,
    "margin-top": false,
    "margin-bottom": false,
    "margin-start": false,
    "margin-end": false,
    "padding": false,
    "padding-x": false,
    "padding-y": false,
    "padding-top": false,
    "padding-bottom": false,
    "padding-start": false,
    "padding-end": false,
    "gap": false,
    "row-gap": false,
    "column-gap": false,
    "negative-margin": false,
    "negative-margin-x": false,
    "negative-margin-y": false,
    "negative-margin-top": false,
    "negative-margin-bottom": false,
    "negative-margin-start": false,
    "negative-margin-end": false,
  ),
);

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {

  // Generate media query if needed
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // Loop over each utility property
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
        @if map.has-key($utility-ignore, $breakpoint, $key) != true {
          @include generate-utility($utility, $infix);
        }
      }
    }
  }
}

// RFS rescaling
@media (min-width: $rfs-mq-value) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @if (map-get($grid-breakpoints, $breakpoint) < $rfs-breakpoint) {
      // Loop over each utility property
      @each $key, $utility in $utilities {
        // The utility can be disabled with `false`, thus check if the utility is a map first
        // Only proceed if responsive media queries are enabled or if it's the base media query
        @if type-of($utility) == "map" and map-get($utility, rfs) and (map-get($utility, responsive) or $infix == "") {
          @if map.has-key($utility-ignore, $breakpoint, $key) != true {
            @include generate-utility($utility, $infix, true);
          }
        }
      }
    }
  }
}


// Print utilities
@media print {
  @each $key, $utility in $utilities {
    // The utility can be disabled with `false`, thus check if the utility is a map first
    // Then check if the utility needs print styles
    @if type-of($utility) == "map" and map-get($utility, print) == true {
      @include generate-utility($utility, "-print");
    }
  }
}
