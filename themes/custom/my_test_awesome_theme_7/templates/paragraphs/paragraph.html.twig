{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# assign paragraph id #}
{% set paragraph_id = paragraph_id|default('paragraph-' ~ paragraph.id()) %}

{# get paragraph behaviors settings #}
{% set custom_attributes = paragraph_behavior_custom_attributes|default({}) %}
{% set paragraph_behavior_custom_id = paragraph.getBehaviorSetting('custom_id_classes_paragraph', 'custom_id', custom_attributes.id|default(paragraph_id)) %}
{% set paragraph_behavior_custom_classes = paragraph.getBehaviorSetting('custom_id_classes_paragraph', 'custom_classes', custom_attributes.class|join(' ')) %}
{% set paragraph_behavior_template_path = paragraph.getBehaviorSetting('custom_twig_template_suggestions_paragraph', 'template_path', custom_attributes.path) %}
{% set paragraph_behavior_variant = paragraph.getBehaviorSetting('custom_twig_template_suggestions_paragraph', 'variant', custom_attributes.variant) %}
{% set paragraph_behavior_modifier = paragraph.getBehaviorSetting('custom_twig_template_suggestions_paragraph', 'modifier', custom_attributes.modifier) %}

{% block paragraph %}
  {% block content %}
    {% set paragraph_template_path_by_path = '@' ~ (paragraph_behavior_template_path ? paragraph_behavior_template_path : '') ~ '.twig'%}

    {% set paragraph_template_path_by_modifier = '@organisms/' ~ (paragraph_behavior_variant ? paragraph_behavior_variant ~ '/' ~ paragraph_behavior_variant : '') ~ '.' ~ (paragraph_behavior_modifier ? paragraph_behavior_modifier : '') ~ '.twig'%}

    {% set paragraph_template_path_by_variant = '@organisms/' ~ (paragraph_behavior_variant ? paragraph_behavior_variant ~ '/' ~ paragraph_behavior_variant : '') ~ '.twig'%}

    {% set include_variables = {
      (paragraph_behavior_variant): ds_variables[paragraph_behavior_variant],
    } %}

    {% set paragraph_content_by_path %}
      {% include paragraph_template_path_by_path ignore missing with include_variables %}
    {% endset %}

    {% set paragraph_content_by_modifier %}
      {% include paragraph_template_path_by_modifier ignore missing with include_variables %}
    {% endset %}

    {% set paragraph_content_by_variant %}
      {% include paragraph_template_path_by_variant ignore missing with include_variables %}
    {% endset %}

    {% if paragraph_content_by_path|trim|render %}
      {{ paragraph_content_by_path }}
    {% elseif paragraph_content_by_modifier|trim|render %}
      {{ paragraph_content_by_modifier }}
    {% elseif paragraph_content_by_variant|trim|render %}
      {{ paragraph_content_by_variant }}
    {% else %}
      {{ content }}
    {% endif %}

  {% endblock %}
{% endblock %}
